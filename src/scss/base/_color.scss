// *** color *** //

// defined model
$normal-model:
0,
19.41,
38.82,
49.41,
60,
90,
120,
180,
240,
270,
300,
330,
360;

$ideal-model:
0,
30,
60,
90,
120,
150,
180,
210,
240,
270,
300,
330,
360;

// to-ideal-hue
@function to-ideal-hue($hue){
  $ideal-hue: null;
  $gap: null;
  @while $hue >= 360 { $hue: $hue - 360; }

  @for $i from 1 through length($normal-model) {
    @if $hue >= nth($normal-model, $i) and
      $hue < nth($normal-model, $i + 1) {
      $gap: (nth($ideal-model, $i + 1) - nth($ideal-model, $i)) * ($hue - nth($normal-model, $i)) / (nth($normal-model, $i + 1) - nth($normal-model, $i));
      $ideal-hue: nth($ideal-model, $i) + $gap;
    }
  }
  @return $ideal-hue;
}
// to-normal-hue
@function to-normal-hue($hue){
  $normal-hue: null;
  $gap: null;
  @while $hue >= 360 { $hue: $hue - 360; }

  @for $i from 1 through length($ideal-model) {
    @if $hue >= nth($ideal-model, $i) and
      $hue < nth($ideal-model, $i + 1) {
      $gap: (nth($normal-model, $i + 1) - nth($normal-model, $i)) * ($hue - nth($ideal-model, $i)) / (nth($ideal-model, $i + 1) - nth($ideal-model, $i));
      $normal-hue: nth($normal-model, $i) + $gap;
    }
  }
  @return $normal-hue;
}

// color
@function color(
  $method,
  $color,
  $order: null,
  $saturation: null,
  $lightness: null,
  $dist: 30
){
  @if $order == null { $order: 0; }
  @if $saturation == null { $saturation: 0; }
  @if $lightness == null { $lightness: 0; }
  $hue: hue($color);
  $target-hue: null;
  
  @if $method == adjacent {
    $target-hue: to-normal-hue(to-ideal-hue($hue) + $dist * $order);
  }
  @if $method == complementary {
    $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
  }
  @if $method == split-complementary {
    @if $order == 1 or $order == -2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 - $dist);
    }
    @if $order == 2 or $order == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 + $dist);
    }
  }
  @if $method == triad {
    @if $order == 1 or $order == -2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 120);
    }
    @if $order == 2 or $order == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 240);
    }
  }
  @if $method == rectangle {
    @if abs($order) == 1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + $dist * $order);
    }
    @if $order == 2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
    }
    @if abs($order) == 3 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 + $dist * $order / 3);
    }
  }
  @if $method == square {
    @if $order == 1 or $order == -3 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 90);
    }
    @if $order == 2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
    }
    @if $order == 3 or $order == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 270);
    }
  }

  // return value
  @return adjust-color($color, $hue: ( $target-hue - $hue ), $saturation: $saturation, $lightness: $lightness);
}

